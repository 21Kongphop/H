// swift-tools-version:5.3 // A versão swift-tools declara a versão mínima do Swift necessária para construir este pacote. /* * Direitos autorais (c) Meta Platforms, Inc. e afiliadas. * Todos os direitos reservados. * * Este código-fonte é licenciado sob a licença encontrada no * Arquivo LICENSE no diretório raiz desta árvore de origem. */  Descrição do pacote de importação Fundação de importação  #if os(Linux) importar Glibc #else importar Darwin.C #endif  deixar pacote = Pacote( nome: "Facebook", plataformas: [ .iOS(.v12), ], produtos: [ // O Kernel do SDK. Deve ser incluído como uma dependência de tempo de execução. .básico,  // O Kit AEM do Facebook .aem,  /* A biblioteca Core SDK que fornece dois módulos importáveis:  - FacebookCore, que inclui a interface mais atual e conterá interfaces para novos recursos escritos em Swift  - FBSDKCoreKit que contém interfaces Objective-C legadas que serão usados para manter a compatibilidade com tipos que foram convertidos para Swift. Isso não conterá interfaces para novos recursos escritos em Swift. */ .core,  // O SDK de Login do Facebook .login,  // O Facebook Share SDK .compartilhar,  // O SDK dos Serviços de Jogos do Facebook .jogo, ], alvos: [ // O kernel do SDK . Prefixed.basics,  /* A implementação objetiva do Objective-C legado que será convertida em Swift. Isso não conterá interfaces para novos recursos escritos em Swift. */ . Prefixo.aem,  // O módulo principal da AEM .aem,  /* A implementação objetiva do Objective-C legado que será convertida em Swift. Isso não conterá interfaces para novos recursos escritos em Swift. */ . Prefixed.core,  // O módulo principal do Core SDK .core,  /* A implementação objetiva do Objective-C legado que será convertida em Swift. Isso não conterá interfaces para novos recursos escritos em Swift. */ . Prefixed.login,  // O módulo principal do Login SDK .login,  /* A implementação Legacy Objective-C que foi convertida em Swift. Isso não conterá interfaces para novos recursos escritos em Swift. */ . Prefixed.share,  // O módulo principal do Share SDK .compartilhar,  /* A implementação Legacy Objective-C que foi convertida em Swift. Isso não conterá interfaces para novos recursos escritos em Swift. */ . Prefixed.gamingServices,  // O principal módulo de Serviços de Jogos do Facebook .jogo, ], cxxLanguageStandard: .cxx11 )  extensão Produto { static let basics = library(nome: .basics, targets: [. Prefixed.basics]) static let core = library(name: .core, targets: [.core, . Prefixed.core]) static let login = library(name: .login, targets: [.login]) static let share = library(name: .share, targets: [.share, . Prefixed.share]) static let gaming = library(name: .gaming, targets: [.gaming, . Prefixed.gaming]) static let aem = library(name: .aem, targets: [.aem, . Prefixed.aem]) }  extensão Alvo { static let binarySource = BinarySource()  static func binaryTarget(nome: String, remoteChecksum: String) -> Target { switch binarySource { caso .local: retornar .binaryTarget( nome: nome, caminho: localBinaryPath(para: nome) ) caso .remoto: retornar .binaryTarget( nome: nome, url: remoteBinaryURLString(para: nome), soma de verificação: soma de verificação remota ) } }  static func localBinaryPath(para targetName: String) -> String { "build/XCFrameworks/Static/\(targetName).xcframework" }  static func remoteBinaryURLString(para targetName: String) -> String { "https://github.com/facebook/facebook-ios-sdk/releases/download/v15.1.0/\(targetName)-Static_XCFramework.zip" }  static let aem = target(name: .aem, dependências: [. Prefixed.aem])  static let core = target( nome: .core, dependências: [.aem, . Prefixed.basics, . Prefixed.core], linkerSettings: [ .cPlusPlusLibrary, .zBiblioteca, .accelerateFramework, ] )  static let login = target(nome: .login, dependências: [.core, . Prefixed.login])  static let share = target(name: .share, dependências: [.core, . Prefixed.share])  static let gaming = target(nome: .gaming, dependências: [. Prefixed.gaming])  enum Prefixado { static let basics = binaryTarget( nome: . Prefixed.basics, remoteChecksum: "5113fd8e41f6ac26e458cccfe6e22e9783a0e787f66a85e9000ac8a23a2c466f" )  static let aem = binaryTarget( nome: . Prefixo.aem, remoteChecksum: "f6463734737fb54ecc311f4f48ab362e68014e04acbacf517b18fcea597a9fdd" )  static let core = binaryTarget( nome: . Prefixed.core, remoteChecksum: "ceeb28dc698c035b230ff951099bc09268dda2abb44710dadc6d9ab6f4616f19" )  static let login = binaryTarget( nome: . Prefixed.login, remoteChecksum: "619ce3f83a16e339abe9298b1a1132f2400f7edd0da86e4e8af57e0aff5bcf1a" )  static let share = binaryTarget( nome: . Prefixed.share, remoteChecksum: "3121629e7653969459e720490f59cfea7389cfc5983a20f3802e80528e94e653" )  static let gamingServices = binaryTarget( nome: . Prefixed.gaming, remoteChecksum: "a19d8efa9103f43c77ea2a173fff05e6f66ce5c6c38bc6e9b96cf886b6d4f134" ) } }  extensão Target.Dependência { static let aem = byName(nome: .aem) static let core = byName(nome: .core)  enum Prefixado { static let aem = byName(name: . Prefixed.aem) static let basics = byName(nome: . Prefixed.basics) static let core = byName(nome: . Prefixed.core) static let login = byName(nome: . Prefixed.login) static let share = byName(name: . Prefixed.share) static let gaming = byName(nome: . Prefixed.gaming) } }  extensão LinkerSetting { static let cPlusPlusLibrary = linkedLibrary("c++") static let zLibrary = linkedLibrary("z") static let accelerateFramework = linkedFramework("Acelerar") }  enum BinarySource { caso local, remoto  init() { se getenv("USE_LOCAL_FB_BINARIES") ! = nil { self = .local } mais { self = .remote } } }  extensão String { static let aem = "FacebookAEM" static let basics = "FacebookBasics" static let core = "FacebookCore" static let login = "FacebookLogin" static let share = "FacebookShare" static let gaming = "FacebookGamingServices"  enum Prefixado { static let aem = "FBAEMKit" static let basics = "FBSDKCoreKit_Basics" static let core = "FBSDKCoreKit" static let login = "FBSDKLoginKit" static let share = "FBSDKShareKit" static let gaming = "FBSDKGamingServicesKit" } }
pod 'FBSDKCoreKit', '~> 8.0.0'
pod 'FBSDKLoginKit', '~> 8.0.0'
pod 'FBSDKShareKit', '~> 8.0.0'
pod 'FBSDKGamingServiceKit', '~> 8.0.0'
